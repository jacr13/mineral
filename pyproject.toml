[tool.poetry]
package-mode = true
name = "mineral"
version = "0.1.0"
authors = ["etaoxing <etaoxing@users.noreply.github.com>"]
description = "A minimal(ish) reinforcement learning library that aggregates reliable implementations"

# if not same as current python version run `poetry env use /home/joao/miniconda3/envs/py-310/bin/python` 

[tool.poetry.dependencies]
python = ">=3.10,<3.12"
dflex = { git = "https://github.com/jacr13/DiffRL.git", branch = "main" }
gym = "0.23.1"
hydra-colorlog = "^1.2.0"
hydra-core = "^1.3.2"
pandas = "^2.3.3"
rewarped = "^1.3.3"
scipy = "1.15.3"
tabulate = "^0.9.0"
tensorboard = "^2.20.0"
termcolor = "^3.1.0"
torch = [
  { version = "^2.6", markers = "sys_platform == 'darwin'" },
  { version = "^2.6", source = "pytorch-cu124", markers = "sys_platform == 'linux'" }
]
urchin = "^0.0.29"
wandb = "^0.22.2"

[[tool.poetry.source]]
name     = "pytorch-cu124"  # CUDA-specific wheels
url      = "https://download.pytorch.org/whl/cu124"
priority = "supplemental"

[tool.ruff]
cache-dir = ".cache/ruff"
line-length = 127
indent-width = 4
extend-exclude = [
    ".git",
    ".vscode",
    "__pycache__",
    "docs",
    "build",
    "third_party",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "I",  # isort
    "F",  # pyflakes
    "W",  # pycodestyle warnings
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "D",  # pydocstyle
]
ignore = [
    "B008",  # Do not perform calls in argument defaults.
    "D10",   # Missing docstring
    "E203",  # Whitespace before ':' (breaks black)
    "E266",  # Too many leading '#' for block comment
    "E302",  # Expected 2 blank lines, found 0
    "E501",  # Line too long
    "E722",  # do not use bare 'except'
    "E731",  # Do not assign a lambda expression, use a def
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401",  # Module imported but unused
    "E402",  # Module level import not at top of file
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "preserve"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

# keep relevant parts in sync with pre-commit
[tool.poe.tasks]  # https://github.com/nat-n/poethepoet

# install
install = "poetry install --no-root"
install_nodev = "poetry install --no-root --no-dev"

# sort
_poetry_sort = "poetry sort"

# format
ruff_check = "poetry run ruff check --fix ."
ruff_fmt = "poetry run ruff format ."
ruff_fix_unsafe = "poetry run ruff check --fix --unsafe-fixes ."
format = ["ruff_check", "ruff_fmt", "_poetry_sort"]

# delete venv and lock
_delete_venv = "poetry env remove python"
_delete_lock = "rm -f poetry.lock"
delete = ["_delete_lock", "_delete_venv"]

# reinstall of venv
reinstall = ["delete", "install"]

# cleaning
clean = """
rm -rf .coverage
        htmlcov
        coverage.xml
        .mypy_cache
        .ruff_cache
        .pytest_cache
        ./**/__pycache__
        dist
        logs
"""

# docker
# --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g)
docker_build = "docker build --build-arg USER_ID=1000 --build-arg GROUP_ID=1000 --no-cache -t candidj0/mineral:no_kernels ."
docker_build_k_1 = "docker run --gpus=all -u 1000:1000 -v .:/workspace --name mineral_build candidj0/mineral:no_kernels python -c 'import dflex'"
docker_build_k_2 = "docker commit mineral_build candidj0/mineral:latest"
docker_build_k_3 = "docker rm mineral_build"
docker_build_dflex_kernels = ["docker_build_k_1", "docker_build_k_2", "docker_build_k_3"]

docker_push = "docker push candidj0/mineral:latest"
dbp = ["docker_build", "docker_build_dflex_kernels", "docker_push"]

docker = """
docker run \
    --gpus=all \
    --rm \
    --env-file .env \
    -it \
    -u 1000:1000 \
    -v /etc/timezone:/etc/timezone:ro \
    -v /etc/localtime:/etc/localtime:ro \
    -v .:/workspace \
    candidj0/mineral:latest bash
"""

docker_win = """
docker run \
    --gpus=all \
    --rm \
    --env-file .env \
    -it \
    -u 1000:1000 \
    -v .:/workspace \
    candidj0/mineral:latest bash
"""

docker_win_su = """
docker run \
    --gpus=all \
    --rm \
    --env-file .env \
    -it \
    -v .:/workspace \
    candidj0/mineral:latest bash
"""
